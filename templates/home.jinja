<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}

{% block content %} 
<div class="container mt-5">
    <!-- Navbar for username and logout -->
    <nav class="navbar navbar-expand navbar-light bg-light">
        <div class="navbar-nav ml-auto">
            <span class="navbar-text">
                Username: {{ username }}
            </span>
            <!-- <a class="nav-link" href="/logout">Logout</a> -->
        </div>
    </nav>

        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3">
                <h3>
                    <a href="#friendRequestsCollapse" data-toggle="collapse" aria-expanded="true" aria-controls="friendRequestsCollapse" class="d-block text-decoration-none">
                        <span class="position-relative d-inline-block">
                            Friend Requests
                        </span>
                    </a>
                </h3>
                <div id="friendRequestsCollapse" class="collapse show">
                    <h4>
                        <a href="#sentRequestsCollapse" data-toggle="collapse" aria-expanded="true" aria-controls="sentRequestsCollapse" class="d-block text-decoration-none">
                            âž¤ Sent Requests 
                        </a>
                    </h4>
                    <div id="sentRequestsCollapse" class="collapse show">
                        <ul class="list-group mb-3">
                            {% if sent_requests %}
                                {% for request in sent_requests %}
                                <li class="list-group-item list-group-item-nested">ðŸŸ  {{ request }}</li>
                                {% endfor %}
                            {% else %}
                                <li class="list-group-item">No sent requests.</li>
                            {% endif %}
                        </ul>
                    </div>
                    <h4>
                        <a href="#receivedRequestsCollapse" data-toggle="collapse" aria-expanded="true" aria-controls="receivedRequestsCollapse" class="d-block text-decoration-none">
                            âž¤ Received Requests 
                        </a>
                    </h4>
                    <div id="receivedRequestsCollapse" class="collapse show">
                        <ul class="list-group">
                            {% if received_requests %}
                                {% for request in received_requests %}
                                <li class="list-group-item">
                                    <div class="request-item">
                                        {{ request }}
                                        <button class="btn btn-success btn-sm" onclick="approveFriend('{{ request }}')">[âœ”]</button>
                                        <button class="btn btn-danger btn-sm" onclick="rejectFriend('{{ request }}')">[âœ˜]</button>
                                    </div>
                                </li>
                                {% endfor %}
                            {% else %}
                                <li class="list-group-item">No received requests.</li>
                            {% endif %}
                        </ul>
                    </div>
                    
                </div>
                
            </div>
            
            
            
            
    
            <!-- Main Content -->
            <div class="col-md-9">
                <!-- Friend Request Section -->
                <div class="mb-3">
                    <h1>Send Friend Request</h1>
                    <div class="input-group mb-3">
                        <input type="text" id="request_userName" class="form-control" placeholder="Enter Username">
                        <div class="input-group-append">
                            <button class="btn btn-outline-primary" type="button" onclick="sendFriendRequest()">Send Friend Request</button>
                        </div>
                    </div>
                </div>
    
                <!-- Friend List -->
                <div class="mb-3">
                    <h1>Friend List</h1>
                    <ul class="list-group">
                        {% for friend in friend_list %}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center position-relative">
                                <span class="dot {{ 'bg-success' if friend.is_online else 'bg-secondary' }} position-absolute top-0 start-100 translate-middle"></span>
                                <span class="ms-2">{{ friend.username }}</span>
                            </div>
                            <span class="badge badge-info">{{ friend.role }}</span>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" onclick="join_room('{{ friend.username }}')">Chat</button>
                                <button class="btn btn-sm btn-outline-danger" onclick="remove_friend('{{ friend.username }}')">Remove</button>
                            </div>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
    
                <!-- Messaging App Section -->
                {% if not user.is_muted %}
                <div>
                    <h1>Messaging App</h1>
                    <div id="message_box" class="border p-3 mb-3">
                        <!-- Messages will be added here dynamically -->
                    </div>
                    <div id="chat_box" class="mt-3">
                        <input id="receiver" class="form-control mb-2" placeholder="Username">
                        <button class="btn btn-primary" onclick="join_room()">Chat</button>
                    </div>
                    <div id="input_box" class="mt-3" style="display: none;">
                        <input id="message" class="form-control mb-2" placeholder="Message">
                        <button class="btn btn-primary" onclick="send()">Send</button>
                        <button class="btn btn-secondary" onclick="leave()">Leave Room</button>
                    </div>
                </div>
                {% endif %}
            </div>
        </div>
</div>

<script src="/static/js/socket.io.min.js"></script>


<script>

    $(document).ready(function() {
            $('.collapse').on('shown.bs.collapse', function () {
                $(this).parent().find('.collapse-arrow').css('transform', 'rotate(90deg)');
            }).on('hidden.bs.collapse', function () {
                $(this).parent().find('.collapse-arrow').css('transform', 'rotate(0deg)');
            });
        });

    function approveFriend(friend_username) {
        fetch('/approve_friend', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username: '{{ username }}', friend_username: friend_username })
        })
        .then(response => {
            if (response.ok) {
                alert('Friend request approved');
                location.reload();
            } else {
                alert('Failed to approve friend request');
            }
        })
        .catch(error => console.error(error));
    }

    function sendFriendRequest() {
        var fname = $("#request_userName").val();
        fetch('/add_friend', {
            credentials: 'include',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username: '{{ username }}', friend_username: fname })
        })
        .then(response => {
            if (response.ok) {
                alert('Friend request sent');
                location.reload();
            } else {
                alert('Failed to send friend request');
            }
        })
        .catch(error => console.error(error));

    }

    function remove_friend(friend_username) {
        fetch('/remove_friend', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username: '{{ username }}', friend_username: friend_username })
        })
        .then(response => {
            if (response.ok) {
                alert('Friend removed');
                location.reload();
            } else {
                alert('Failed to remove friend');
            }
        })
        .catch(error => console.error(error));
    }


    function rejectFriend(friend_username) {
        fetch('/reject_friend', {
            credentials: 'include',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username: '{{ username }}', friend_username: friend_username })
        })
        .then(response => {
            if (response.ok) {
                alert('Friend request rejected');
                location.reload();
            } else {
                alert('Failed to reject friend request');
            }
        })
        .catch(error => console.error(error));
    }
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    // socket.on("incoming", (msg, sender) => {
    //     let color = sender === "{{ username }}" ? "green" : "blue";
    //     add_message(msg, color, sender);
    // });

    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id, window.receiverName);  
    } 

    // we emit a join room event to the server to join a room
    function load_chat(rname) {
        fetch(`/chat/${username}/${rname}`, {credentials: 'include'})
    .then(response => response.json())
    .then(data => {
      // Clear the chat history div
      debugger;
      $("#chat-history").empty();

      // Append the chat messages to the chat history div
      data.forEach(message => {
        const color = message[1] === '{{ username }}' ? 'blue' : 'green';
        $(`<p style="color:${color};">${message[1]}: ${message[0]}</p>`).appendTo("#message_box");
      });

      // Show the input box and hide the "Chat with:" box
      $("#chat_box").hide();
      $("#input_box").show();

    })
    .catch(error => console.error(error));
    }
    function join_room(rname) {

         
        load_chat(rname);
        let receiver = rname || $("#receiver").val();
        window.receiverName =  rname || $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color, sender) {
        let box = $("#message_box");
        let isSender = sender === "{{ username }}";
        let messageClass = isSender ? 'my-message' : 'other-message';
        let messageText = isSender ? `You: ${message}` : `${sender}: ${message}`;
        
        let child = $(`
            <div class="${messageClass} p-2 mb-1">
                <p class="mb-0">${messageText}</p>
            </div>
        `);
        
        box.append(child);
    }

    function add_system_message(message, color) {
        let box = $("#message_box");
        let isColor = color === `red`;
        let messageClass = isColor ? 'system-message-red' : 'system-message-green';
        let child = $(`
            <div class="${messageClass} p-2 mb-1">
                <p class="mb-0">${message}</p>
            </div>
        `);

        box.append(child);
    }

    socket.on("incoming", (msg, color, sender) => {
        if (sender === "system") {
            add_system_message(msg, color);
        } else {
            add_message(msg, color, sender);
        }
    });
    
</script>
{% endblock %}
